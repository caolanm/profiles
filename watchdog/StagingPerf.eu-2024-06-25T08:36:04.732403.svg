<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="598" onload="init(evt)" viewBox="0 0 1200 598" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="598.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >StagingPerf.eu Watchdog Profile (2024-06-25T08:36:04.732403)</text>
<text id="details" x="10.00" y="581" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="581" > </text>
<g id="frames">
<g >
<title>http::Session::syncRequest (5 samples, 25.00%)</title><rect x="10.0" y="469" width="295.0" height="15.0" fill="rgb(250,88,50)" rx="2" ry="2" />
<text  x="13.00" y="479.5" >http::Session::syncRequest</text>
</g>
<g >
<title>ssl3_read (1 samples, 5.00%)</title><rect x="1131.0" y="453" width="59.0" height="15.0" fill="rgb(246,176,19)" rx="2" ry="2" />
<text  x="1134.00" y="463.5" >ssl3_r..</text>
</g>
<g >
<title>desktop::Desktop::doShutdown (1 samples, 5.00%)</title><rect x="600.0" y="421" width="59.0" height="15.0" fill="rgb(248,35,36)" rx="2" ry="2" />
<text  x="603.00" y="431.5" >deskto..</text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;std::vector&lt;com::sun::star::uno::Reference&lt;com::sun::star::deployment::XPackage&gt;, std::allocator&lt;com::sun::star::uno::Reference&lt;com::sun::star::deployment::XPackage&gt; &gt; &gt;*, std::vector&lt;std::vector&lt;com::sun::star::uno::Reference&lt;com::sun::star::deployment::XPackage&gt;, std::allocator&lt;com::sun::star::uno::Reference&lt;com::sun::star::deployment::XPackage&gt; &gt; &gt;, std::allocator&lt;std::vector&lt;com::sun::star::uno::Reference&lt;com::sun::star::deployment::XPackage&gt;, std::allocator&lt;com::sun::star::uno::Reference&lt;com::sun::star::deployment::XPackage&gt; &gt; &gt; &gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;(anonymous namespace)::CompIdentifiers&gt; &gt; (1 samples, 5.00%)</title><rect x="600.0" y="341" width="59.0" height="15.0" fill="rgb(240,115,33)" rx="2" ry="2" />
<text  x="603.00" y="351.5" >std::_..</text>
</g>
<g >
<title>xmlParseStartTag2.constprop.0 (1 samples, 5.00%)</title><rect x="600.0" y="181" width="59.0" height="15.0" fill="rgb(253,195,41)" rx="2" ry="2" />
<text  x="603.00" y="191.5" >xmlPar..</text>
</g>
<g >
<title>ssl3_get_record (1 samples, 5.00%)</title><rect x="1131.0" y="421" width="59.0" height="15.0" fill="rgb(228,122,41)" rx="2" ry="2" />
<text  x="1134.00" y="431.5" >ssl3_g..</text>
</g>
<g >
<title>desktop::Desktop::Main (1 samples, 5.00%)</title><rect x="600.0" y="437" width="59.0" height="15.0" fill="rgb(206,107,39)" rx="2" ry="2" />
<text  x="603.00" y="447.5" >deskto..</text>
</g>
<g >
<title>soffice_main (1 samples, 5.00%)</title><rect x="600.0" y="469" width="59.0" height="15.0" fill="rgb(251,4,13)" rx="2" ry="2" />
<text  x="603.00" y="479.5" >soffic..</text>
</g>
<g >
<title>xmlDictLookupHashed (1 samples, 5.00%)</title><rect x="600.0" y="133" width="59.0" height="15.0" fill="rgb(210,140,38)" rx="2" ry="2" />
<text  x="603.00" y="143.5" >xmlDic..</text>
</g>
<g >
<title>ScTable::ExtendPrintArea (1 samples, 5.00%)</title><rect x="541.0" y="277" width="59.0" height="15.0" fill="rgb(208,92,20)" rx="2" ry="2" />
<text  x="544.00" y="287.5" >ScTabl..</text>
</g>
<g >
<title>SfxObjectShell::SaveTo_Impl (1 samples, 5.00%)</title><rect x="541.0" y="469" width="59.0" height="15.0" fill="rgb(252,129,42)" rx="2" ry="2" />
<text  x="544.00" y="479.5" >SfxObj..</text>
</g>
<g >
<title>SocketPoll::poll (5 samples, 25.00%)</title><rect x="10.0" y="437" width="295.0" height="15.0" fill="rgb(221,126,45)" rx="2" ry="2" />
<text  x="13.00" y="447.5" >SocketPoll::poll</text>
</g>
<g >
<title>_IO_funlockfile (1 samples, 5.00%)</title><rect x="1131.0" y="309" width="59.0" height="15.0" fill="rgb(216,196,11)" rx="2" ry="2" />
<text  x="1134.00" y="319.5" >_IO_fu..</text>
</g>
<g >
<title>tls13_enc (1 samples, 5.00%)</title><rect x="1131.0" y="405" width="59.0" height="15.0" fill="rgb(250,142,47)" rx="2" ry="2" />
<text  x="1134.00" y="415.5" >tls13_..</text>
</g>
<g >
<title>xmlParseQNameHashed (1 samples, 5.00%)</title><rect x="600.0" y="165" width="59.0" height="15.0" fill="rgb(215,165,53)" rx="2" ry="2" />
<text  x="603.00" y="175.5" >xmlPar..</text>
</g>
<g >
<title>SocketPoll::pollingThreadEntry (8 samples, 40.00%)</title><rect x="659.0" y="501" width="472.0" height="15.0" fill="rgb(248,40,3)" rx="2" ry="2" />
<text  x="662.00" y="511.5" >SocketPoll::pollingThreadEntry</text>
</g>
<g >
<title>coolwsd (9 samples, 45.00%)</title><rect x="10.0" y="533" width="531.0" height="15.0" fill="rgb(217,141,2)" rx="2" ry="2" />
<text  x="13.00" y="543.5" >coolwsd</text>
</g>
<g >
<title>ScPrintFunc::ScPrintFunc (1 samples, 5.00%)</title><rect x="541.0" y="357" width="59.0" height="15.0" fill="rgb(219,66,4)" rx="2" ry="2" />
<text  x="544.00" y="367.5" >ScPrin..</text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;std::vector&lt;com::sun::star::uno::Reference&lt;com::sun::star::deployment::XPackage&gt;, std::allocator&lt;com::sun::star::uno::Reference&lt;com::sun::star::deployment::XPackage&gt; &gt; &gt;*, std::vector&lt;std::vector&lt;com::sun::star::uno::Reference&lt;com::sun::star::deployment::XPackage&gt;, std::allocator&lt;com::sun::star::uno::Reference&lt;com::sun::star::deployment::XPackage&gt; &gt; &gt;, std::allocator&lt;std::vector&lt;com::sun::star::uno::Reference&lt;com::sun::star::deployment::XPackage&gt;, std::allocator&lt;com::sun::star::uno::Reference&lt;com::sun::star::deployment::XPackage&gt; &gt; &gt; &gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;(anonymous namespace)::CompIdentifiers&gt; &gt; (1 samples, 5.00%)</title><rect x="600.0" y="357" width="59.0" height="15.0" fill="rgb(252,37,17)" rx="2" ry="2" />
<text  x="603.00" y="367.5" >std::_..</text>
</g>
<g >
<title>xmlParseElementStart (1 samples, 5.00%)</title><rect x="600.0" y="197" width="59.0" height="15.0" fill="rgb(225,82,4)" rx="2" ry="2" />
<text  x="603.00" y="207.5" >xmlPar..</text>
</g>
<g >
<title>ScPrintFunc::CountPages (1 samples, 5.00%)</title><rect x="541.0" y="309" width="59.0" height="15.0" fill="rgb(249,69,53)" rx="2" ry="2" />
<text  x="544.00" y="319.5" >ScPrin..</text>
</g>
<g >
<title>_IO_funlockfile (8 samples, 40.00%)</title><rect x="659.0" y="405" width="472.0" height="15.0" fill="rgb(232,69,36)" rx="2" ry="2" />
<text  x="662.00" y="415.5" >_IO_funlockfile</text>
</g>
<g >
<title>handleUserProfileSignal (5 samples, 25.00%)</title><rect x="10.0" y="389" width="295.0" height="15.0" fill="rgb(235,126,37)" rx="2" ry="2" />
<text  x="13.00" y="399.5" >handleUserProfileSignal</text>
</g>
<g >
<title>SslStreamSocket::readData (1 samples, 5.00%)</title><rect x="1131.0" y="485" width="59.0" height="15.0" fill="rgb(220,71,31)" rx="2" ry="2" />
<text  x="1134.00" y="495.5" >SslStr..</text>
</g>
<g >
<title>syscall (1 samples, 5.00%)</title><rect x="600.0" y="37" width="59.0" height="15.0" fill="rgb(233,147,6)" rx="2" ry="2" />
<text  x="603.00" y="47.5" >syscall</text>
</g>
<g >
<title>[unknown] (9 samples, 45.00%)</title><rect x="10.0" y="517" width="531.0" height="15.0" fill="rgb(213,38,12)" rx="2" ry="2" />
<text  x="13.00" y="527.5" >[unknown]</text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;std::vector&lt;com::sun::star::uno::Reference&lt;com::sun::star::deployment::XPackage&gt;, std::allocator&lt;com::sun::star::uno::Reference&lt;com::sun::star::deployment::XPackage&gt; &gt; &gt;*, std::vector&lt;std::vector&lt;com::sun::star::uno::Reference&lt;com::sun::star::deployment::XPackage&gt;, std::allocator&lt;com::sun::star::uno::Reference&lt;com::sun::star::deployment::XPackage&gt; &gt; &gt;, std::allocator&lt;std::vector&lt;com::sun::star::uno::Reference&lt;com::sun::star::deployment::XPackage&gt;, std::allocator&lt;com::sun::star::uno::Reference&lt;com::sun::star::deployment::XPackage&gt; &gt; &gt; &gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;(anonymous namespace)::CompIdentifiers&gt; &gt; (1 samples, 5.00%)</title><rect x="600.0" y="325" width="59.0" height="15.0" fill="rgb(248,17,37)" rx="2" ry="2" />
<text  x="603.00" y="335.5" >std::_..</text>
</g>
<g >
<title>ImplSVMain (1 samples, 5.00%)</title><rect x="600.0" y="453" width="59.0" height="15.0" fill="rgb(220,28,39)" rx="2" ry="2" />
<text  x="603.00" y="463.5" >ImplSV..</text>
</g>
<g >
<title>ScPrintFunc::AdjustPrintArea (1 samples, 5.00%)</title><rect x="541.0" y="293" width="59.0" height="15.0" fill="rgb(254,118,10)" rx="2" ry="2" />
<text  x="544.00" y="303.5" >ScPrin..</text>
</g>
<g >
<title>xmlParseDocument (1 samples, 5.00%)</title><rect x="600.0" y="245" width="59.0" height="15.0" fill="rgb(241,84,53)" rx="2" ry="2" />
<text  x="603.00" y="255.5" >xmlPar..</text>
</g>
<g >
<title>lo_runLoop (1 samples, 5.00%)</title><rect x="600.0" y="485" width="59.0" height="15.0" fill="rgb(239,140,31)" rx="2" ry="2" />
<text  x="603.00" y="495.5" >lo_run..</text>
</g>
<g >
<title>syscall (1 samples, 5.00%)</title><rect x="541.0" y="165" width="59.0" height="15.0" fill="rgb(212,117,1)" rx="2" ry="2" />
<text  x="544.00" y="175.5" >syscall</text>
</g>
<g >
<title>[unknown] (2 samples, 10.00%)</title><rect x="541.0" y="517" width="118.0" height="15.0" fill="rgb(233,132,7)" rx="2" ry="2" />
<text  x="544.00" y="527.5" >[unknown]</text>
</g>
<g >
<title>dp_manager::ExtensionManager::getAllExtensions (1 samples, 5.00%)</title><rect x="600.0" y="373" width="59.0" height="15.0" fill="rgb(239,223,27)" rx="2" ry="2" />
<text  x="603.00" y="383.5" >dp_man..</text>
</g>
<g >
<title>xmlParseNCName (1 samples, 5.00%)</title><rect x="600.0" y="149" width="59.0" height="15.0" fill="rgb(244,228,0)" rx="2" ry="2" />
<text  x="603.00" y="159.5" >xmlPar..</text>
</g>
<g >
<title>ScTable::MaybeAddExtraColumn (1 samples, 5.00%)</title><rect x="541.0" y="261" width="59.0" height="15.0" fill="rgb(243,78,37)" rx="2" ry="2" />
<text  x="544.00" y="271.5" >ScTabl..</text>
</g>
<g >
<title>SfxObjectShell::ExportTo (1 samples, 5.00%)</title><rect x="541.0" y="453" width="59.0" height="15.0" fill="rgb(226,42,1)" rx="2" ry="2" />
<text  x="544.00" y="463.5" >SfxObj..</text>
</g>
<g >
<title>ScPrintFuncCache::ScPrintFuncCache (1 samples, 5.00%)</title><rect x="541.0" y="373" width="59.0" height="15.0" fill="rgb(252,86,27)" rx="2" ry="2" />
<text  x="544.00" y="383.5" >ScPrin..</text>
</g>
<g >
<title>DocumentToGraphicRenderer::getDocumentSizeInPixels (1 samples, 5.00%)</title><rect x="541.0" y="421" width="59.0" height="15.0" fill="rgb(242,164,11)" rx="2" ry="2" />
<text  x="544.00" y="431.5" >Docume..</text>
</g>
<g >
<title>StreamSocket::readIncomingData (1 samples, 5.00%)</title><rect x="1131.0" y="501" width="59.0" height="15.0" fill="rgb(247,25,22)" rx="2" ry="2" />
<text  x="1134.00" y="511.5" >Stream..</text>
</g>
<g >
<title>xmlParseElement (1 samples, 5.00%)</title><rect x="600.0" y="229" width="59.0" height="15.0" fill="rgb(211,37,27)" rx="2" ry="2" />
<text  x="603.00" y="239.5" >xmlPar..</text>
</g>
<g >
<title>ssl3_read_bytes (1 samples, 5.00%)</title><rect x="1131.0" y="437" width="59.0" height="15.0" fill="rgb(209,9,52)" rx="2" ry="2" />
<text  x="1134.00" y="447.5" >ssl3_r..</text>
</g>
<g >
<title>MapMode::MapMode (1 samples, 5.00%)</title><rect x="541.0" y="213" width="59.0" height="15.0" fill="rgb(206,87,0)" rx="2" ry="2" />
<text  x="544.00" y="223.5" >MapMod..</text>
</g>
<g >
<title>ScColumn::GetNeededSize (1 samples, 5.00%)</title><rect x="541.0" y="245" width="59.0" height="15.0" fill="rgb(208,61,28)" rx="2" ry="2" />
<text  x="544.00" y="255.5" >ScColu..</text>
</g>
<g >
<title>http::Session::syncRequest (8 samples, 40.00%)</title><rect x="659.0" y="469" width="472.0" height="15.0" fill="rgb(244,157,1)" rx="2" ry="2" />
<text  x="662.00" y="479.5" >http::Session::syncRequest</text>
</g>
<g >
<title>handleUserProfileSignal (1 samples, 5.00%)</title><rect x="1131.0" y="293" width="59.0" height="15.0" fill="rgb(219,120,16)" rx="2" ry="2" />
<text  x="1134.00" y="303.5" >handle..</text>
</g>
<g >
<title>xmlDictFindEntry (1 samples, 5.00%)</title><rect x="600.0" y="101" width="59.0" height="15.0" fill="rgb(240,37,51)" rx="2" ry="2" />
<text  x="603.00" y="111.5" >xmlDic..</text>
</g>
<g >
<title>SfxObjectShell::CommonSaveAs_Impl (1 samples, 5.00%)</title><rect x="541.0" y="501" width="59.0" height="15.0" fill="rgb(205,106,27)" rx="2" ry="2" />
<text  x="544.00" y="511.5" >SfxObj..</text>
</g>
<g >
<title>xmlParseContentInternal (1 samples, 5.00%)</title><rect x="600.0" y="213" width="59.0" height="15.0" fill="rgb(211,196,22)" rx="2" ry="2" />
<text  x="603.00" y="223.5" >xmlPar..</text>
</g>
<g >
<title>syscall (8 samples, 40.00%)</title><rect x="659.0" y="373" width="472.0" height="15.0" fill="rgb(251,197,7)" rx="2" ry="2" />
<text  x="662.00" y="383.5" >syscall</text>
</g>
<g >
<title>CRYPTO_gcm128_decrypt (1 samples, 5.00%)</title><rect x="1131.0" y="341" width="59.0" height="15.0" fill="rgb(243,103,15)" rx="2" ry="2" />
<text  x="1134.00" y="351.5" >CRYPTO..</text>
</g>
<g >
<title>comphelper::BackupFileHelper::tryPush_extensionInfo (1 samples, 5.00%)</title><rect x="600.0" y="389" width="59.0" height="15.0" fill="rgb(218,92,21)" rx="2" ry="2" />
<text  x="603.00" y="399.5" >comphe..</text>
</g>
<g >
<title>syscall (5 samples, 25.00%)</title><rect x="10.0" y="373" width="295.0" height="15.0" fill="rgb(248,142,27)" rx="2" ry="2" />
<text  x="13.00" y="383.5" >syscall</text>
</g>
<g >
<title>handleUserProfileSignal (1 samples, 5.00%)</title><rect x="541.0" y="181" width="59.0" height="15.0" fill="rgb(245,29,34)" rx="2" ry="2" />
<text  x="544.00" y="191.5" >handle..</text>
</g>
<g >
<title>GraphicExportFilter::filterRenderDocument (1 samples, 5.00%)</title><rect x="541.0" y="437" width="59.0" height="15.0" fill="rgb(232,172,25)" rx="2" ry="2" />
<text  x="544.00" y="447.5" >Graphi..</text>
</g>
<g >
<title>SocketPoll::poll (8 samples, 40.00%)</title><rect x="659.0" y="437" width="472.0" height="15.0" fill="rgb(253,114,20)" rx="2" ry="2" />
<text  x="662.00" y="447.5" >SocketPoll::poll</text>
</g>
<g >
<title>SfxObjectShell::PreDoSaveAs_Impl (1 samples, 5.00%)</title><rect x="541.0" y="485" width="59.0" height="15.0" fill="rgb(209,5,21)" rx="2" ry="2" />
<text  x="544.00" y="495.5" >SfxObj..</text>
</g>
<g >
<title>ppoll (8 samples, 40.00%)</title><rect x="659.0" y="421" width="472.0" height="15.0" fill="rgb(227,19,25)" rx="2" ry="2" />
<text  x="662.00" y="431.5" >ppoll</text>
</g>
<g >
<title>generic_aes_gcm_cipher_update (1 samples, 5.00%)</title><rect x="1131.0" y="357" width="59.0" height="15.0" fill="rgb(210,17,36)" rx="2" ry="2" />
<text  x="1134.00" y="367.5" >generi..</text>
</g>
<g >
<title>COOLWSD::innerMain (5 samples, 25.00%)</title><rect x="10.0" y="501" width="295.0" height="15.0" fill="rgb(219,124,26)" rx="2" ry="2" />
<text  x="13.00" y="511.5" >COOLWSD::innerMain</text>
</g>
<g >
<title>COOLWSD::processFetchUpdate (5 samples, 25.00%)</title><rect x="10.0" y="485" width="295.0" height="15.0" fill="rgb(209,58,10)" rx="2" ry="2" />
<text  x="13.00" y="495.5" >COOLWSD::processFetchUpdate</text>
</g>
<g >
<title>_IO_funlockfile (5 samples, 25.00%)</title><rect x="10.0" y="405" width="295.0" height="15.0" fill="rgb(218,52,33)" rx="2" ry="2" />
<text  x="13.00" y="415.5" >_IO_funlockfile</text>
</g>
<g >
<title>RemoteJSONPoll::pollingThread (8 samples, 40.00%)</title><rect x="659.0" y="485" width="472.0" height="15.0" fill="rgb(211,7,12)" rx="2" ry="2" />
<text  x="662.00" y="495.5" >RemoteJSONPoll::pollingThread</text>
</g>
<g >
<title>_IO_funlockfile (1 samples, 5.00%)</title><rect x="541.0" y="197" width="59.0" height="15.0" fill="rgb(207,54,31)" rx="2" ry="2" />
<text  x="544.00" y="207.5" >_IO_fu..</text>
</g>
<g >
<title>xmlDictLookupInternal (1 samples, 5.00%)</title><rect x="600.0" y="117" width="59.0" height="15.0" fill="rgb(241,206,30)" rx="2" ry="2" />
<text  x="603.00" y="127.5" >xmlDic..</text>
</g>
<g >
<title>ScPatternAttr::fillFontOnly (1 samples, 5.00%)</title><rect x="541.0" y="229" width="59.0" height="15.0" fill="rgb(253,138,2)" rx="2" ry="2" />
<text  x="544.00" y="239.5" >ScPatt..</text>
</g>
<g >
<title>handleUserProfileSignal (8 samples, 40.00%)</title><rect x="659.0" y="389" width="472.0" height="15.0" fill="rgb(233,74,16)" rx="2" ry="2" />
<text  x="662.00" y="399.5" >handleUserProfileSignal</text>
</g>
<g >
<title>remotefontconfi (9 samples, 45.00%)</title><rect x="659.0" y="533" width="531.0" height="15.0" fill="rgb(247,225,9)" rx="2" ry="2" />
<text  x="662.00" y="543.5" >remotefontconfi</text>
</g>
<g >
<title>ScPrintFunc::InitParam (1 samples, 5.00%)</title><rect x="541.0" y="325" width="59.0" height="15.0" fill="rgb(209,148,13)" rx="2" ry="2" />
<text  x="544.00" y="335.5" >ScPrin..</text>
</g>
<g >
<title>DOM::CDocumentBuilder::parse (1 samples, 5.00%)</title><rect x="600.0" y="277" width="59.0" height="15.0" fill="rgb(212,207,43)" rx="2" ry="2" />
<text  x="603.00" y="287.5" >DOM::C..</text>
</g>
<g >
<title>dp_registry::backend::bundle::(anonymous namespace)::BackendImpl::PackageImpl::getDisplayName (1 samples, 5.00%)</title><rect x="600.0" y="309" width="59.0" height="15.0" fill="rgb(234,156,42)" rx="2" ry="2" />
<text  x="603.00" y="319.5" >dp_reg..</text>
</g>
<g >
<title>__strncmp_avx2 (1 samples, 5.00%)</title><rect x="600.0" y="85" width="59.0" height="15.0" fill="rgb(223,134,34)" rx="2" ry="2" />
<text  x="603.00" y="95.5" >__strn..</text>
</g>
<g >
<title>SSL_read (1 samples, 5.00%)</title><rect x="1131.0" y="469" width="59.0" height="15.0" fill="rgb(207,166,29)" rx="2" ry="2" />
<text  x="1134.00" y="479.5" >SSL_read</text>
</g>
<g >
<title>DocumentToGraphicRenderer::getDocumentSizeIn100mm (1 samples, 5.00%)</title><rect x="541.0" y="405" width="59.0" height="15.0" fill="rgb(214,59,35)" rx="2" ry="2" />
<text  x="544.00" y="415.5" >Docume..</text>
</g>
<g >
<title>AES_encrypt (1 samples, 5.00%)</title><rect x="1131.0" y="325" width="59.0" height="15.0" fill="rgb(219,13,43)" rx="2" ry="2" />
<text  x="1134.00" y="335.5" >AES_en..</text>
</g>
<g >
<title>dp_misc::getDescriptionInfoset (1 samples, 5.00%)</title><rect x="600.0" y="293" width="59.0" height="15.0" fill="rgb(253,134,36)" rx="2" ry="2" />
<text  x="603.00" y="303.5" >dp_mis..</text>
</g>
<g >
<title>kitbroker (2 samples, 10.00%)</title><rect x="541.0" y="533" width="118.0" height="15.0" fill="rgb(242,78,41)" rx="2" ry="2" />
<text  x="544.00" y="543.5" >kitbroker</text>
</g>
<g >
<title>LocalServerSocket::accept (4 samples, 20.00%)</title><rect x="305.0" y="501" width="236.0" height="15.0" fill="rgb(253,95,9)" rx="2" ry="2" />
<text  x="308.00" y="511.5" >LocalServerSocket::accept</text>
</g>
<g >
<title>ScModelObj::getRendererCount (1 samples, 5.00%)</title><rect x="541.0" y="389" width="59.0" height="15.0" fill="rgb(240,91,48)" rx="2" ry="2" />
<text  x="544.00" y="399.5" >ScMode..</text>
</g>
<g >
<title>[unknown] (9 samples, 45.00%)</title><rect x="659.0" y="517" width="531.0" height="15.0" fill="rgb(237,190,1)" rx="2" ry="2" />
<text  x="662.00" y="527.5" >[unknown]</text>
</g>
<g >
<title>ScPrintFunc::Construct (1 samples, 5.00%)</title><rect x="541.0" y="341" width="59.0" height="15.0" fill="rgb(217,194,6)" rx="2" ry="2" />
<text  x="544.00" y="351.5" >ScPrin..</text>
</g>
<g >
<title>handleUserProfileSignal (1 samples, 5.00%)</title><rect x="600.0" y="53" width="59.0" height="15.0" fill="rgb(205,227,1)" rx="2" ry="2" />
<text  x="603.00" y="63.5" >handle..</text>
</g>
<g >
<title>all (20 samples, 100%)</title><rect x="10.0" y="549" width="1180.0" height="15.0" fill="rgb(253,89,23)" rx="2" ry="2" />
<text  x="13.00" y="559.5" ></text>
</g>
<g >
<title>_IO_funlockfile (1 samples, 5.00%)</title><rect x="600.0" y="69" width="59.0" height="15.0" fill="rgb(208,53,16)" rx="2" ry="2" />
<text  x="603.00" y="79.5" >_IO_fu..</text>
</g>
<g >
<title>syscall (4 samples, 20.00%)</title><rect x="305.0" y="485" width="236.0" height="15.0" fill="rgb(235,59,9)" rx="2" ry="2" />
<text  x="308.00" y="495.5" >syscall</text>
</g>
<g >
<title>comphelper::BackupFileHelper::tryPushExtensionInfo (1 samples, 5.00%)</title><rect x="600.0" y="405" width="59.0" height="15.0" fill="rgb(236,151,49)" rx="2" ry="2" />
<text  x="603.00" y="415.5" >comphe..</text>
</g>
<g >
<title>http::Session::syncRequest (8 samples, 40.00%)</title><rect x="659.0" y="453" width="472.0" height="15.0" fill="rgb(244,21,26)" rx="2" ry="2" />
<text  x="662.00" y="463.5" >http::Session::syncRequest</text>
</g>
<g >
<title>http::Session::syncRequest (5 samples, 25.00%)</title><rect x="10.0" y="453" width="295.0" height="15.0" fill="rgb(248,51,8)" rx="2" ry="2" />
<text  x="13.00" y="463.5" >http::Session::syncRequest</text>
</g>
<g >
<title>lokit_main (1 samples, 5.00%)</title><rect x="600.0" y="501" width="59.0" height="15.0" fill="rgb(211,191,33)" rx="2" ry="2" />
<text  x="603.00" y="511.5" >lokit_..</text>
</g>
<g >
<title>EVP_DecryptUpdate (1 samples, 5.00%)</title><rect x="1131.0" y="389" width="59.0" height="15.0" fill="rgb(233,47,39)" rx="2" ry="2" />
<text  x="1134.00" y="399.5" >EVP_De..</text>
</g>
<g >
<title>ossl_gcm_stream_update (1 samples, 5.00%)</title><rect x="1131.0" y="373" width="59.0" height="15.0" fill="rgb(240,135,2)" rx="2" ry="2" />
<text  x="1134.00" y="383.5" >ossl_g..</text>
</g>
<g >
<title>syscall (1 samples, 5.00%)</title><rect x="1131.0" y="277" width="59.0" height="15.0" fill="rgb(241,191,36)" rx="2" ry="2" />
<text  x="1134.00" y="287.5" >syscall</text>
</g>
<g >
<title>xmlDoRead (1 samples, 5.00%)</title><rect x="600.0" y="261" width="59.0" height="15.0" fill="rgb(227,167,50)" rx="2" ry="2" />
<text  x="603.00" y="271.5" >xmlDoR..</text>
</g>
<g >
<title>ppoll (5 samples, 25.00%)</title><rect x="10.0" y="421" width="295.0" height="15.0" fill="rgb(232,18,22)" rx="2" ry="2" />
<text  x="13.00" y="431.5" >ppoll</text>
</g>
</g>
</svg>
